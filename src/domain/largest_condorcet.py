

data = """
12345678 12345687 12345867 12345876 12346578 12346587 12346758 12346785 12354678 12354687
12354867 12354876 12358467 12358476 12364578 12364587 12364758 12364785 12367458 12367485
12435678 12435687 12435867 12435876 12436578 12436587 12436758 12436785 12453678 12453687
12453867 12453876 12458367 12458376 12463578 12463587 12463758 12463785 12467358 12467385
14235678 14235687 14235867 14235876 14236578 14236587 14236758 14236785 14253678 14253687
14253867 14253876 14258367 14258376 14263578 14263587 14263758 14263785 14267358 14267385
14523678 14523687 14523867 14523876 14528367 14528376 14582367 14582376 14623578 14623587
14623758 14623785 14627358 14627385 14672358 14672385 21345678 21345687 21345867 21345876
21346578 21346587 21346758 21346785 21354678 21354687 21354867 21354876 21358467 21358476
21364578 21364587 21364758 21364785 21367458 21367485 21435678 21435687 21435867 21435876
21436578 21436587 21436758 21436785 21453678 21453687 21453867 21453876 21458367 21458376
21463578 21463587 21463758 21463785 21467358 21467385 23145678 23145687 23145867 23145876
23146578 23146587 23146758 23146785 23154678 23154687 23154867 23154876 23158467 23158476
23164578 23164587 23164758 23164785 23167458 23167485 23514678 23514687 23514867 23514876
23518467 23518476 23581467 23581476 23614578 23614587 23614758 23614785 23617458 23617485
23671458 23671485 32145678 32145687 32145867 32145876 32146578 32146587 32146758 32146785
32154678 32154687 32154867 32154876 32158467 32158476 32164578 32164587 32164758 32164785
32167458 32167485 32514678 32514687 32514867 32514876 32518467 32518476 32581467 32581476
32614578 32614587 32614758 32614785 32617458 32617485 32671458 32671485 41235678 41235687
41235867 41235876 41236578 41236587 41236758 41236785 41253678 41253687 41253867 41253876
41258367 41258376 41263578 41263587 41263758 41263785 41267358 41267385 41523678 41523687
41523867 41523876 41528367 41528376 41582367 41582376 41623578 41623587 41623758 41623785
41627358 41627385 41672358 41672385
"""

def largest_condorcet_domain(num_candidates):
    """
    Generate the largest Condorcet domain for a given number of candidates.

    Parameters
    ----------
        num_candidates : int
            Number of candidates.

    Returns
    -------
        List[List[int]]
            List of votes in the largest Condorcet domain.
    """
    if num_candidates != 8:
        raise NotImplementedError("Largest Condorcet domain is only implemented for 8 candidates.")

    # Split into numbers
    numbers = data.split()

    # Convert each number into a list of digits
    votes = [[int(d)-1 for d in num] for num in numbers]

    return votes
